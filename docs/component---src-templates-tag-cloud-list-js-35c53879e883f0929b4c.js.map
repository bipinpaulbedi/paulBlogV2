{"version":3,"sources":["webpack:///./src/templates/tagCloudList.js"],"names":["TagCloudLinks","styled","p","withConfig","displayName","componentId","TagCloudGroup","div","TagCloudTemplate","_ref","edges","data","allMarkdownRemark","groupedPosts","R","ele","node","frontmatter","year","elems","Object","keys","sort","reverse","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_9__","_components_seo__WEBPACK_IMPORTED_MODULE_8__","title","keywords","map","Fragment","_ref2","_ref2$node$frontmatte","pathForPage","href","key","pageQuery"],"mappings":"+VAQaA,EAAgBC,IAAOC,EAAVC,WAAA,CAAAC,YAAA,8BAAAC,YAAA,YAAGJ,CAAH,+FAYbK,EAAgBL,IAAOM,IAAVJ,WAAA,CAAAC,YAAA,8BAAAC,YAAA,YAAGJ,CAAH,+BAKX,SAASO,EAATC,GAIZ,IAFsBC,EAEtBD,EAHDE,KACEC,kBAAqBF,MAGjBG,EAAeC,IAAU,SAAAC,GAC7B,OAAOA,EAAIC,KAAKC,YAAYC,MAC3BR,GAEGS,EAAQC,OAAOC,KAAKR,GACvBS,OACAC,UAEH,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKC,MAAM,eAAeC,SAAU,sBACnCX,EAAMY,IAAI,SAAAhB,GACT,OACES,EAAAC,EAAAC,cAACF,EAAAC,EAAMO,SAAP,KACER,EAAAC,EAAAC,cAACpB,EAAD,KAAgBS,GACfF,EAAaE,GAAKgB,IACjB,SAAAE,GAIM,IAAAC,EAAAD,EAHJjB,KACEC,YAAeY,EAEbK,EAFaL,MAAOM,EAEpBD,EAFoBC,YAGxB,OACEX,EAAAC,EAAAC,cAAC1B,EAAD,KACEwB,EAAAC,EAAAC,cAAA,KAAGU,KAAI,IAAMD,EAAeE,IAAKR,GAC9BA,UAahB,IAAMS,EAAS","file":"component---src-templates-tag-cloud-list-js-35c53879e883f0929b4c.js","sourcesContent":["import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport * as R from \"ramda\"\nimport styled from \"styled-components\"\nimport SEO from \"../components/seo\"\n\nimport Layout from \"../components/layout\"\n\nexport const TagCloudLinks = styled.p`\n  font-size: 1.2em;\n  margin-top: 0.5em;\n  margin-bottom: 0.5em;\n  a {\n    color: #333;\n    :hover {\n      color: #ff5252;\n    }\n  }\n`\n\nexport const TagCloudGroup = styled.div`\n  font-size: 2em;\n  color: #bbb;\n`\n\nexport default function TagCloudTemplate({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n}) {\n  const groupedPosts = R.groupBy(ele => {\n    return ele.node.frontmatter.year\n  }, edges)\n\n  const elems = Object.keys(groupedPosts)\n    .sort()\n    .reverse()\n\n  return (\n    <Layout>\n      <SEO title=\"Tag Explorer\" keywords={[`bipin paul bedi`]} />\n      {elems.map(ele => {\n        return (\n          <React.Fragment>\n            <TagCloudGroup>{ele}</TagCloudGroup>\n            {groupedPosts[ele].map(\n              ({\n                node: {\n                  frontmatter: { title, pathForPage },\n                },\n              }) => {\n                return (\n                  <TagCloudLinks>\n                    <a href={`/${pathForPage}`} key={title}>\n                      {title}\n                    </a>\n                  </TagCloudLinks>\n                )\n              }\n            )}\n          </React.Fragment>\n        )\n      })}\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query TagCloudTemplateQuery($tag: String!) {\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            year: date(formatString: \"YYYY\")\n            title\n            pathForPage\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}