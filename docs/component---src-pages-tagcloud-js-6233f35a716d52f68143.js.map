{"version":3,"sources":["webpack:///./node_modules/ramda/es/forEach.js","webpack:///./src/components/tagCloudList.js","webpack:///./src/pages/tagcloud.js"],"names":["es_forEach","Object","_curry2","_checkForMethod","fn","list","len","length","idx","Tag","styled","a","withConfig","displayName","componentId","TagCloudList","react_default","createElement","gatsby_browser_entry","query","render","_ref","edges","allMarkdownRemark","allTags","R","ele","push","apply","node","frontmatter","tags","allTagsSorted","sort","groupedCloud","keys","map","key","href","data","_2471616219","IndexPage","layout","seo","title","keywords","tagCloudList"],"mappings":"6MA8CeA,EATYC,OAAAC,EAAA,EAAAD,CAAsBA,OAAAE,EAAA,EAAAF,CAAe,mBAAAG,EAAAC,GAGhE,IAFA,IAAAC,EAAAD,EAAAE,OACAC,EAAA,EACAA,EAAAF,GACAF,EAAAC,EAAAG,IACAA,GAAA,EAEA,OAAAH,cCvCMI,SAAMC,EAAOC,EAAVC,WAAA,CAAAC,YAAA,oBAAAC,YAAA,gBAAGJ,CAAH,iBA0CMK,EAtCM,kBACnBC,EAAAL,EAAAM,cAACC,EAAA,EAAD,CACEC,MAAK,aAaLC,OAAQ,SAAAC,GAAsC,IAAdC,EAAcD,EAAnCE,kBAAqBD,MACxBE,EAAU,GAChBC,EAAU,SAAAC,GACRF,EAAQG,KAARC,MAAAJ,EAAgBE,EAAIG,KAAKC,YAAYC,OACpCT,GAEH,IAAMU,EAAgBR,EAAQS,OAExBC,EAAeT,IAAU,SAAAC,GAC7B,OAAOA,GACNM,GAEH,OAAO/B,OAAOkC,KAAKD,GAAcE,IAAI,SAAAV,GACnC,OACEV,EAAAL,EAAAM,cAACR,EAAD,CAAK4B,IAAKX,EAAKY,KAAK,KACjBZ,EADH,KACUQ,EAAaR,GAAKnB,OAD5B,QA5BRgC,KAAAC,KCGaC,UAPG,kBAChBzB,EAAAL,EAAAM,cAACyB,EAAA,EAAD,KACE1B,EAAAL,EAAAM,cAAC0B,EAAA,EAAD,CAAKC,MAAM,OAAOC,SAAU,sBAC5B7B,EAAAL,EAAAM,cAAC6B,EAAD","file":"component---src-pages-tagcloud-js-6233f35a716d52f68143.js","sourcesContent":["import _checkForMethod from './internal/_checkForMethod.js';\nimport _curry2 from './internal/_curry2.js';\n\n/**\n * Iterate over an input `list`, calling a provided function `fn` for each\n * element in the list.\n *\n * `fn` receives one argument: *(value)*.\n *\n * Note: `R.forEach` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.forEach` method. For more\n * details on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description\n *\n * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns\n * the original array. In some libraries this function is named `each`.\n *\n * Dispatches to the `forEach` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig (a -> *) -> [a] -> [a]\n * @param {Function} fn The function to invoke. Receives one argument, `value`.\n * @param {Array} list The list to iterate over.\n * @return {Array} The original list.\n * @see R.addIndex\n * @example\n *\n *      const printXPlusFive = x => console.log(x + 5);\n *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]\n *      // logs 6\n *      // logs 7\n *      // logs 8\n * @symb R.forEach(f, [a, b, c]) = [a, b, c]\n */\nvar forEach = /*#__PURE__*/_curry2( /*#__PURE__*/_checkForMethod('forEach', function forEach(fn, list) {\n  var len = list.length;\n  var idx = 0;\n  while (idx < len) {\n    fn(list[idx]);\n    idx += 1;\n  }\n  return list;\n}));\nexport default forEach;","import React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\nimport * as R from \"ramda\"\nimport styled from \"styled-components\"\n\nconst Tag = styled.a`\n    margin: .3em\n`\n\nconst TagCloudList = () => (\n  <StaticQuery\n    query={graphql`\n      query TagCloudListQuery {\n        allMarkdownRemark {\n          edges {\n            node {\n              frontmatter {\n                tags\n              }\n            }\n          }\n        }\n      }\n    `}\n    render={({ allMarkdownRemark: { edges } }) => {\n      const allTags = []\n      R.forEach(ele => {\n        allTags.push(...ele.node.frontmatter.tags)\n      }, edges)\n\n      const allTagsSorted = allTags.sort();\n      \n      const groupedCloud = R.groupBy(ele => {\n        return ele\n      }, allTagsSorted)\n\n      return Object.keys(groupedCloud).map(ele => {\n        return (\n          <Tag key={ele} href=\"/\">\n            {ele} ({groupedCloud[ele].length})\n          </Tag>\n        )\n      })\n    }}\n  />\n)\n\nexport default TagCloudList\n","import React from \"react\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport TagCloud from \"../components/tagCloudList\"\n\nconst IndexPage = () => (\n  <Layout>\n    <SEO title=\"Home\" keywords={[`bipin paul bedi`]} />\n    <TagCloud />\n  </Layout>\n)\n\nexport default IndexPage\n"],"sourceRoot":""}