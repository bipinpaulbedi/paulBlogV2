{"version":3,"sources":["webpack:///./src/templates/tagCloudList.js","webpack:///./src/components/blogList.js"],"names":["TagCloudLinks","styled","p","withConfig","displayName","componentId","TagCloudTemplate","_ref","edges","data","allMarkdownRemark","groupedPosts","R","ele","node","frontmatter","year","elems","Object","keys","sort","reverse","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_9__","_components_seo__WEBPACK_IMPORTED_MODULE_8__","title","keywords","map","Fragment","_components_blogList__WEBPACK_IMPORTED_MODULE_10__","_ref2","_ref2$node$frontmatte","pathForPage","href","key","pageQuery","BlogGroup","div","HomeContentLinks","IndexPageBlogList","react__WEBPACK_IMPORTED_MODULE_6___default","gatsby__WEBPACK_IMPORTED_MODULE_7__","query","render","_public_static_d_3375400885_json__WEBPACK_IMPORTED_MODULE_5__"],"mappings":"4TASaA,EAAgBC,IAAOC,EAAVC,WAAA,CAAAC,YAAA,8BAAAC,YAAA,YAAGJ,CAAH,+FAYX,SAASK,EAATC,GAIZ,IAFsBC,EAEtBD,EAHDE,KACEC,kBAAqBF,MAGjBG,EAAeC,IAAU,SAAAC,GAC7B,OAAOA,EAAIC,KAAKC,YAAYC,MAC3BR,GAEGS,EAAQC,OAAOC,KAAKR,GACvBS,OACAC,UAEH,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKC,MAAM,MAAMC,SAAU,sBAC1BX,EAAMY,IAAI,SAAAhB,GACT,OACES,EAAAC,EAAAC,cAACF,EAAAC,EAAMO,SAAP,KACER,EAAAC,EAAAC,cAACO,EAAA,EAAD,KAAYlB,GACXF,EAAaE,GAAKgB,IACjB,SAAAG,GAIM,IAAAC,EAAAD,EAHJlB,KACEC,YAAeY,EAEbM,EAFaN,MAAOO,EAEpBD,EAFoBC,YAGxB,OACEZ,EAAAC,EAAAC,cAACxB,EAAD,KACEsB,EAAAC,EAAAC,cAAA,KAAGW,KAAI,IAAMD,EAAeE,IAAKT,GAC9BA,UAahB,IAAMU,EAAS,oKC1DTC,EAAYrC,IAAOsC,IAAVpC,WAAA,CAAAC,YAAA,sBAAAC,YAAA,eAAGJ,CAAH,+BAKTuC,EAAmBvC,IAAOC,EAAVC,WAAA,CAAAC,YAAA,6BAAAC,YAAA,eAAGJ,CAAH,+FAiEdwC,IArDW,kBACxBC,EAAAnB,EAAAC,cAACmB,EAAA,EAAD,CACEC,MAAK,aAgBLC,OAAQ,SAAAtC,GAAsC,IAAdC,EAAcD,EAAnCG,kBAAqBF,MACxBG,EAAeC,IAAU,SAAAC,GAC7B,OAAOA,EAAIC,KAAKC,YAAYC,MAC3BR,GAMH,OAJcU,OAAOC,KAAKR,GACvBS,OACAC,UAEUQ,IAAI,SAAAhB,GACf,OACE6B,EAAAnB,EAAAC,cAACkB,EAAAnB,EAAMO,SAAP,KACEY,EAAAnB,EAAAC,cAACc,EAAD,KAAYzB,GACXF,EAAaE,GAAKgB,IACjB,SAAAG,GAIM,IAAAC,EAAAD,EAHJlB,KACEC,YAAeY,EAEbM,EAFaN,MAAOO,EAEpBD,EAFoBC,YAGxB,OACEQ,EAAAnB,EAAAC,cAACgB,EAAD,KACEE,EAAAnB,EAAAC,cAAA,KAAGW,KAAMD,EAAaE,IAAKT,GACxBA,UAvCrBlB,KAAAqC","file":"component---src-templates-tag-cloud-list-js-f4db50ebbad6a6ae4f30.js","sourcesContent":["import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport * as R from \"ramda\"\nimport styled from \"styled-components\"\nimport SEO from \"../components/seo\"\n\nimport Layout from \"../components/layout\"\nimport { BlogGroup } from \"../components/blogList\"\n\nexport const TagCloudLinks = styled.p`\n  font-size: 1.2em;\n  margin-top: 0.5em;\n  margin-bottom: 0.5em;\n  a {\n    color: #333;\n    :hover {\n      color: #ff5252;\n    }\n  }\n`\n\nexport default function TagCloudTemplate({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n}) {\n  const groupedPosts = R.groupBy(ele => {\n    return ele.node.frontmatter.year\n  }, edges)\n\n  const elems = Object.keys(groupedPosts)\n    .sort()\n    .reverse()\n\n  return (\n    <Layout>\n      <SEO title=\"Tag\" keywords={[`bipin paul bedi`]} />\n      {elems.map(ele => {\n        return (\n          <React.Fragment>\n            <BlogGroup>{ele}</BlogGroup>\n            {groupedPosts[ele].map(\n              ({\n                node: {\n                  frontmatter: { title, pathForPage },\n                },\n              }) => {\n                return (\n                  <TagCloudLinks>\n                    <a href={`/${pathForPage}`} key={title}>\n                      {title}\n                    </a>\n                  </TagCloudLinks>\n                )\n              }\n            )}\n          </React.Fragment>\n        )\n      })}\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query TagCloudTemplateQuery($tag: String!) {\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            year: date(formatString: \"YYYY\")\n            title\n            pathForPage\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\nimport * as R from \"ramda\"\nimport styled from \"styled-components\"\n\nexport const BlogGroup = styled.div`\n  font-size: 2em;\n  color: #bbb;\n`\n\nexport const HomeContentLinks = styled.p`\n  font-size: 1.2em;\n  margin-top: 0.5em;\n  margin-bottom: 0.5em;\n  a {\n    color: #333;\n    :hover {\n      color: #ff5252;\n    }\n  }\n`\n\nconst IndexPageBlogList = () => (\n  <StaticQuery\n    query={graphql`\n      query IndexPageBlogListQuery {\n        allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n          edges {\n            node {\n              frontmatter {\n                date(formatString: \"MMMM DD, YYYY\")\n                year: date(formatString: \"YYYY\")\n                title\n                pathForPage\n              }\n            }\n          }\n        }\n      }\n    `}\n    render={({ allMarkdownRemark: { edges } }) => {\n      const groupedPosts = R.groupBy(ele => {\n        return ele.node.frontmatter.year\n      }, edges)\n\n      const elems = Object.keys(groupedPosts)\n        .sort()\n        .reverse()\n\n      return elems.map(ele => {\n        return (\n          <React.Fragment>\n            <BlogGroup>{ele}</BlogGroup>\n            {groupedPosts[ele].map(\n              ({\n                node: {\n                  frontmatter: { title, pathForPage },\n                },\n              }) => {\n                return (\n                  <HomeContentLinks>\n                    <a href={pathForPage} key={title}>\n                      {title}\n                    </a>\n                  </HomeContentLinks>\n                )\n              }\n            )}\n          </React.Fragment>\n        )\n      })\n    }}\n  />\n)\n\nexport default IndexPageBlogList\n"],"sourceRoot":""}